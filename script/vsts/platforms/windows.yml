jobs:
  - job: Windows_Build
    dependsOn: GetReleaseVersion
    timeoutInMinutes: 180
    strategy:
      maxParallel: 2
      matrix:
        x64:
          buildArch: x64
          RunCoreMainTests: true
        # x86:
        #   buildArch: x86
        #   RunCoreMainTests: true

    pool:
      vmImage: vs2017-win2016

    variables:
      AppName: $[ dependencies.GetReleaseVersion.outputs['Version.AppName'] ]
      ReleaseVersion: $[ dependencies.GetReleaseVersion.outputs['Version.ReleaseVersion'] ]
      IsReleaseBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsReleaseBranch'] ]
      IsSignedZipBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsSignedZipBranch'] ]

    steps:
      - template: templates/windows-preparation.yml

      - template: templates/cache.yml
        parameters:
          OS: windows

      - script: |
          %RunCommand% script\bootstrap.cmd
        env:
          BUILD_ARCH: $(buildArch)
          CI: true
          CI_PROVIDER: VSTS
          NPM_BIN_PATH: "C:\\hostedtoolcache\\windows\\node\\12.13.1\\x64\\npm.cmd"
          npm_config_build_from_source: true
        displayName: Bootstrap build environment
        condition: or(ne(variables['MainNodeModulesRestored'], 'true'), ne(variables['ScriptNodeModulesRestored'], 'true'), ne(variables['ApmNodeModulesRestored'], 'true'))

      - script: |
          %RunCommand% script\lint.cmd
        env:
          BUILD_ARCH: $(buildArch)
        displayName: Run linter

      - script: |
          IF NOT EXIST C:\tmp MKDIR C:\tmp
          SET SQUIRREL_TEMP=C:\tmp
          IF [%IS_RELEASE_BRANCH%]==[true] (
            ECHO Creating production artifacts for release branch %BUILD_SOURCEBRANCHNAME%
            IF [%SHOULD_SIGN%]==[true] (
             %RunCommand% script\build.cmd --no-bootstrap --code-sign --compress-artifacts --create-windows-installer
            ) ELSE (
             %RunCommand% script\build.cmd --no-bootstrap --compress-artifacts --create-windows-installer
            )
          ) ELSE (
            IF [%IS_SIGNED_ZIP_BRANCH%]==[true] (
              ECHO Creating signed CI artifacts for branch %BUILD_SOURCEBRANCHNAME%
             IF [%SHOULD_SIGN%]==[true] (
              %RunCommand% script\build.cmd --no-bootstrap --code-sign --compress-artifacts
             ) ELSE (
              %RunCommand% script\build.cmd --no-bootstrap --compress-artifacts
             )
            ) ELSE (
              ECHO Pull request build, no code signing will be performed
              %RunCommand% script\build.cmd --no-bootstrap --compress-artifacts
            )
          )
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          BUILD_ARCH: $(buildArch)
          ATOM_RELEASE_VERSION: $(ReleaseVersion)
          ATOM_WIN_CODE_SIGNING_CERT_DOWNLOAD_URL: $(ATOM_WIN_CODE_SIGNING_CERT_DOWNLOAD_URL)
          ATOM_WIN_CODE_SIGNING_CERT_PASSWORD: $(ATOM_WIN_CODE_SIGNING_CERT_PASSWORD)
          IS_RELEASE_BRANCH: $(IsReleaseBranch)
          IS_SIGNED_ZIP_BRANCH: $(IsSignedZipBranch)
          npm_config_build_from_source: true
        displayName: Build Atom

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/atom-x64-windows.zip
          ArtifactName: atom-x64-windows.zip
          ArtifactType: Container
        displayName: Upload atom-x64-windows.zip
        condition: and(succeeded(), eq(variables['buildArch'], 'x64'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/AtomSetup-x64.exe
          ArtifactName: AtomSetup-x64.exe
          ArtifactType: Container
        displayName: Upload AtomSetup-x64.exe
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x64'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/$(AppName)-x64-$(ReleaseVersion)-full.nupkg
          ArtifactName: $(AppName)-x64-$(ReleaseVersion)-full.nupkg
          ArtifactType: Container
        displayName: Upload $(AppName)-x64-$(ReleaseVersion)-full.nupkg
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x64'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/$(AppName)-x64-$(ReleaseVersion)-delta.nupkg
          ArtifactName: $(AppName)-x64-$(ReleaseVersion)-delta.nupkg
          ArtifactType: Container
        displayName: Upload $(AppName)-x64-$(ReleaseVersion)-delta.nupkg
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x64'))
        continueOnError: true # Nightly builds don't produce delta packages yet, so don't fail the build

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/RELEASES-x64
          ArtifactName: RELEASES-x64
          ArtifactType: Container
        displayName: Upload RELEASES-x64
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x64'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/atom-windows.zip
          ArtifactName: atom-windows.zip
          ArtifactType: Container
        displayName: Upload atom-windows.zip
        condition: and(succeeded(), eq(variables['buildArch'], 'x86'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/AtomSetup.exe
          ArtifactName: AtomSetup.exe
          ArtifactType: Container
        displayName: Upload AtomSetup.exe
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x86'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/$(AppName)-$(ReleaseVersion)-full.nupkg
          ArtifactName: $(AppName)-$(ReleaseVersion)-full.nupkg
          ArtifactType: Container
        displayName: Upload $(AppName)-$(ReleaseVersion)-full.nupkg
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x86'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/$(AppName)-$(ReleaseVersion)-delta.nupkg
          ArtifactName: $(AppName)-$(ReleaseVersion)-delta.nupkg
          ArtifactType: Container
        displayName: Upload $(AppName)-$(ReleaseVersion)-delta.nupkg
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x86'))
        continueOnError: true # Nightly builds don't produce delta packages yet, so don't fail the build

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/RELEASES
          ArtifactName: RELEASES
          ArtifactType: Container
        displayName: Upload RELEASES
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x86'))

      #  Core main tests
      - template: templates/windows-test.yml

  - job: Windows_RendererTests
    dependsOn: Windows_Build
    timeoutInMinutes: 180
    strategy:
      maxParallel: 2
      matrix:
        x64_Renderer_Test1:
          RunCoreMainTests: false
          RunCoreRenderer: 1
          buildArch: x64
        x64_Renderer_Test2:
          RunCoreMainTests: false
          RunCoreRenderer: 2
          buildArch: x64

    pool:
      vmImage: vs2017-win2016

    variables:
      AppName: $[ dependencies.GetReleaseVersion.outputs['Version.AppName'] ]
      ReleaseVersion: $[ dependencies.GetReleaseVersion.outputs['Version.ReleaseVersion'] ]
      IsReleaseBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsReleaseBranch'] ]
      IsSignedZipBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsSignedZipBranch'] ]

    steps:
      - template: templates/windows-preparation.yml

      - template: templates/cache.yml
        parameters:
          OS: windows

      # Downloading the build artifacts
      - task: DownloadBuildArtifacts@0
        displayName: Download atom-x64-windows.zip
        inputs:
          artifactName: 'atom-x64-windows.zip'
          downloadPath: $(Build.SourcesDirectory)
        condition: and(succeeded(), eq(variables['buildArch'], 'x64'))

      - script: unzip atom-x64-windows.zip/atom-x64-windows.zip -d out
        displayName: Unzip atom-x64-windows.zip
        condition: and(succeeded(), eq(variables['buildArch'], 'x64'))

      - task: DownloadBuildArtifacts@0
        displayName: Download atom-windows.zip
        inputs:
          artifactName: 'atom-windows.zip'
          downloadPath: $(Build.SourcesDirectory)
        condition: and(succeeded(), eq(variables['buildArch'], 'x86'))

      - script: unzip atom-windows.zip/atom-windows.zip -d out
        displayName: Unzip atom-windows.zip
        condition: and(succeeded(), eq(variables['buildArch'], 'x86'))

      #  Core renderer tests
      - template: templates/windows-test.yml
